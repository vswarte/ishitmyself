use crate::game::dl::DLWString;
use crate::game::fd4::{FD4BasicHashString, FD4ResCap, FD4ResCapHolder, FfxRepositoryImp, ResRepository};

#[repr(align(8))]
struct AlignedBuffer<const T: usize>([u8; T]);

#[test]
fn test_dlwstring_inlined() {
    const DATA: AlignedBuffer<32> = AlignedBuffer([
        0x63, 0x00, 0x73, 0x00, 0x5f, 0x00, 0x76, 0x00, 0x6d, 0x00, 0x36, 0x00,
        0x30, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ]);

    let string: &DLWString = unsafe { &*(DATA.0.as_ptr() as *const DLWString)};
    assert_eq!(string.length, 7);
    assert_eq!(string.capacity, 7);
    assert_eq!(string.to_string(), "cs_vm60");
}

#[test]
fn test_fd4basichashstring() {
    const DATA: AlignedBuffer<88> = AlignedBuffer([
        0x48, 0x17, 0x98, 0x42, 0x01, 0x00, 0x00, 0x00, 0xb8, 0xef, 0xac, 0x43,
        0x01, 0x00, 0x00, 0x00, 0x40, 0xc2, 0x23, 0xec, 0xf4, 0x7f, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x97, 0xa2, 0x2f, 0x39,
        0x00, 0x00, 0x00, 0x00, 0xd0, 0x14, 0x18, 0x9e, 0xf4, 0x7f, 0x00, 0x00,
        0x20, 0x19, 0x31, 0x9e, 0xf4, 0x7f, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00 
    ]);

    let string: &FD4BasicHashString = unsafe {
        &*(DATA.0.as_ptr() as *const FD4BasicHashString)
    };

    assert_eq!(string.unk1, 0x01);
    assert_eq!(string.hash, 0x392fa297);
    assert!(!string.needs_hashing);
}

#[test]
fn test_fd4rescap() {
    const DATA: AlignedBuffer<96> = AlignedBuffer([
        0x38, 0x95, 0xb1, 0x42, 0x01, 0x00, 0x00, 0x00, 0x48, 0x17, 0x98, 0x42,
        0x01, 0x00, 0x00, 0x00, 0xb8, 0xef, 0xac, 0x43, 0x01, 0x00, 0x00, 0x00,
        0x20, 0x46, 0x0f, 0xa4, 0xf4, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x8f, 0xfb, 0x10, 0x6f, 0x00, 0x00, 0x00, 0x00,
        0xd0, 0x14, 0x18, 0x9e, 0xf4, 0x7f, 0x00, 0x00, 0x60, 0x0f, 0x31, 0x9e,
        0xf4, 0x7f, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    ]);

    let res_cap: &FD4ResCap<()> = unsafe { 
        &*(DATA.0.as_ptr() as *const FD4ResCap<()>)
    };

    assert_eq!(res_cap.vftable, 0x142b19538);
    assert_eq!(res_cap.owning_repository as usize, 0x7ff49e1814d0);
    assert_eq!(res_cap.next_item as usize, 0x7ff49e310f60);
    assert_eq!(res_cap.reference_count, 0x1);
}

#[test]
fn test_resrepository() {
    const DATA: AlignedBuffer<40> = AlignedBuffer([
        0x00, 0x76, 0x23, 0x43, 0x01, 0x00, 0x00, 0x00, 0xb8, 0xef, 0xac, 0x43,
        0x01, 0x00, 0x00, 0x00, 0x20, 0x9c, 0x5a, 0x9e, 0xf4, 0x7f, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0xf5, 0x26, 0x00, 0x00, 0xe0, 0x1c, 0x19, 0xf6,
        0xf3, 0x7f, 0x00, 0x00,
    ]);

    let holder: &FD4ResCapHolder<()> = unsafe { 
        &*(DATA.0.as_ptr() as *const FD4ResCapHolder<()>)
    };

    assert_eq!(holder.vftable, 0x143237600);
    assert_eq!(holder.allocator, 0x143acefb8);
    assert_eq!(holder.owning_repository, 0x7ff49e5a9c20);
    assert_eq!(holder.capacity, 0x26f5);
    assert_eq!(holder.map as usize, 0x7ff3f6191ce0);
}

#[test]
fn test_ffxrepository() {
    const DATA: AlignedBuffer<160> = AlignedBuffer([
        0x58, 0xc4, 0xb4, 0x42, 0x01, 0x00, 0x00, 0x00, 0x48, 0x17, 0x98, 0x42,
        0x01, 0x00, 0x00, 0x00, 0xb8, 0xef, 0xac, 0x43, 0x01, 0x00, 0x00, 0x00,
        0x46, 0x00, 0x46, 0x00, 0x58, 0x00, 0x00, 0x00, 0x90, 0x16, 0x34, 0x9e,
        0xf4, 0x7f, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x76, 0x23, 0x43, 0x01, 0x00, 0x00, 0x00, 0xb8, 0xef, 0xac, 0x43,
        0x01, 0x00, 0x00, 0x00, 0x40, 0x15, 0x34, 0x9e, 0xf4, 0x7f, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x8b, 0x13, 0x00, 0x00, 0x90, 0x81, 0x46, 0x9e,
        0xf4, 0x7f, 0x00, 0x00
    ]);

    let repository: &FfxRepositoryImp = unsafe { 
        &*(DATA.0.as_ptr() as *const FfxRepositoryImp)
    };

    println!("{:#?}", repository);
}
